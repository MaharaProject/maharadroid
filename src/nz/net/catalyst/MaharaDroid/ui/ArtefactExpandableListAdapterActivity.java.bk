/*  
 *  MaharaDroid -  Artefact uploader
 * 
 *  This file is part of MaharaDroid.
 * 
 *  Copyright [2010] [Catalyst IT Limited]  
 *  
 *  This file is free software: you may copy, redistribute and/or modify it  
 *  under the terms of the GNU General Public License as published by the  
 *  Free Software Foundation, either version 3 of the License, or (at your  
 *  option) any later version.  
 *  
 *  This file is distributed in the hope that it will be useful, but  
 *  WITHOUT ANY WARRANTY; without even the implied warranty of  
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  
 *  General Public License for more details.  
 *  
 *  You should have received a copy of the GNU General Public License  
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.  
 */

package nz.net.catalyst.MaharaDroid.ui;

import java.util.ArrayList;
import java.util.Date;

import nz.net.catalyst.MaharaDroid.GlobalResources;
import nz.net.catalyst.MaharaDroid.LogConfig;
import nz.net.catalyst.MaharaDroid.R;
import nz.net.catalyst.MaharaDroid.Utils;
import nz.net.catalyst.MaharaDroid.data.Artefact;
import nz.net.catalyst.MaharaDroid.data.ArtefactUtils;
import nz.net.catalyst.MaharaDroid.data.SyncUtils;
import nz.net.catalyst.MaharaDroid.ui.about.AboutActivity;
import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.database.ContentObserver;
import android.graphics.Bitmap;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.provider.MediaStore;
import android.provider.Settings;
import android.text.Html;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.view.View.OnClickListener;
import android.view.Window;
import android.widget.BaseExpandableListAdapter;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.ExpandableListView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;

public class ArtefactExpandableListAdapterActivity extends Activity {
	static final String TAG = LogConfig.getLogTag(ArtefactExpandableListAdapterActivity.class);
	// whether DEBUG level logging is enabled (whether globally, or explicitly
	// for this log tag)
	static final boolean DEBUG = LogConfig.isDebug(TAG);
	// whether VERBOSE level logging is enabled
	static final boolean VERBOSE = LogConfig.VERBOSE;

	private static Context mContext;
	
	//private ArrayList<Artefact> items = new ArrayList<Artefact>();
	private ArtefactExpandableListAdapter adapter;
	
	private ExpandableListView listview;
	
    ArtefactContentObserver acObserver = new ArtefactContentObserver(new Handler());
	
	private class ArtefactContentObserver extends ContentObserver {

		public ArtefactContentObserver(Handler handler) {
	        super(handler);
	    }

		@Override
		public boolean deliverSelfNotifications() {
			return true;
		}

	    @Override
	    public void onChange(boolean selfChange) {
	        super.onChange(selfChange);
	    	if ( VERBOSE ) Log.v(TAG, "ArtefactContentObserver: onChange() called");
	    	updateView();
	    }
	}
	
	@Override
	public void onCreate(Bundle savedInstanceState) {
	    super.onCreate(savedInstanceState);
	    mContext = this;
	    
	    requestWindowFeature(Window.FEATURE_CUSTOM_TITLE);
        setContentView(R.layout.artefacts);

        getWindow().setFeatureInt(Window.FEATURE_CUSTOM_TITLE, R.layout.windowtitle);
        
        this.getContentResolver().registerContentObserver(ArtefactUtils.URI, true, acObserver);
	    
        // Load artefacts on the UI
        updateView();
        
		// A content view has now be set so lets set the title.
        ((TextView) findViewById(R.id.windowtitle_text)).setText(getString(R.string.app_name));

    	if ( VERBOSE ) Log.v(TAG, "onCreate() called");
    	
	}

//	public void onResume() {
//	    super.onResume();   
//    	if ( VERBOSE ) Log.v(TAG, "onResume() calls loadSavedArtefacts");
//	    updateView();		
//	}    
	public void onDestroy() {
	    super.onDestroy();

        this.getContentResolver().unregisterContentObserver(acObserver);
	}
	private void updateView() {
		// First lets get our DB object
    	// Lets see how many saved artefacts we have
	    Artefact[] a_array = ArtefactUtils.loadSavedArtefacts(mContext);
	    
    	if ( DEBUG ) Log.d(TAG, "returned " + a_array.length + " items");

    	// If none then we show introduction screen
    	if ( a_array == null || a_array.length <= 0 ) {
    		// Show the introduction screen
            ((RelativeLayout) findViewById(R.id.introduction)).setVisibility(View.VISIBLE);
            ((TextView) findViewById(R.id.artefacts_help)).setText(Html.fromHtml(getString(R.string.artefacts_help)));
            ((RelativeLayout) findViewById(R.id.artefacts)).setVisibility(View.GONE);
    		
		// Else we have some artefacts to show lets load them up in our ExpandableListAdapter
    	} else {
            adapter  = new ArtefactExpandableListAdapter(this, new ArrayList<String>(), 
        			new ArrayList<ArrayList<Artefact>>());
            listview = (ExpandableListView) findViewById(R.id.listView);
    		listview.setAdapter(adapter);

			// Hide the introduction bits
            ((RelativeLayout) findViewById(R.id.introduction)).setVisibility(View.GONE);
            ((RelativeLayout) findViewById(R.id.artefacts)).setVisibility(View.VISIBLE);
			
		    for ( int i = 0; i < a_array.length && a_array[i] != null; i++ ) {
		    	if ( DEBUG ) Log.d(TAG, "adding item " + a_array[i].getFilename() + " [" + i + "]");
				adapter.addItem(a_array[i]);
			}
	
			// notifiyDataSetChanged triggers the re-draw
		    // Set this blank adapter to the list view
			adapter.notifyDataSetChanged();
			listview.invalidate();
    	}
    	
	}
	public boolean onCreateOptionsMenu(Menu menu) {
		boolean result = super.onCreateOptionsMenu(menu);

		  MenuInflater inflater = getMenuInflater();
		  inflater.inflate(R.menu.artefact_options, menu);
		  return result;
	}
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		Intent intent;
		switch (item.getItemId()) {
			case R.id.option_delete:
				ArtefactUtils.deleteAllSavedArtefacts(mContext);
//				updateView();
				break;
			case R.id.option_upload:
				ArtefactUtils.uploadAllSavedArtefacts(mContext);
//				updateView();
				break;
			case R.id.about:
				startActivity(new Intent(this, AboutActivity.class));
				break;
			case R.id.option_pref:
				intent = new Intent(this, EditPreferences.class);
				intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
				startActivity(intent);
				break;
			case R.id.option_account:
				startActivity(new Intent(Settings.ACTION_SYNC_SETTINGS).putExtra(Settings.EXTRA_AUTHORITIES, new String[] {GlobalResources.SYNC_AUTHORITY}));
				break;
			case R.id.option_compose:
				intent = new Intent(this, JournalSettingsActivity.class);
				startActivity(intent);
				break;
		}
		return true;
	}

	public void onActivityResult(int requestCode, int resultCode, Intent intent) { 
        if (resultCode == Activity.RESULT_OK) {
    		String imageFile = null;
        	Intent i = new Intent(this, FileSettingsActivity.class);

        	switch (requestCode) {
			case GlobalResources.REQ_GALLERY_RETURN:
				imageFile = intent.getData().toString();
				break;
    		}
        	
        	i.putExtra("uri", new String[] { imageFile });
        	startActivity(i);
        }
	}

//	public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {
//		adapter.onCreateContextMenu(menu, v, menuInfo);
//	}
//	public boolean onContextItemSelected(MenuItem item) {
//		adapter.onContextItemSelected(item);
//		return false;
//	}
	public class ArtefactExpandableListAdapter extends BaseExpandableListAdapter implements OnClickListener {
	    @Override
	    public boolean areAllItemsEnabled()
	    {
	        return true;
	    }

	    private Context mContext;

	    private ArrayList<String> groups;

	    private ArrayList<ArrayList<Artefact>> children;

	    public ArtefactExpandableListAdapter(Context context, ArrayList<String> groups,
	            ArrayList<ArrayList<Artefact>> children) {
	        this.mContext = context;
	        this.groups = groups;
	        this.children = children;
	    }

	    public void addItem(Artefact art) {
	        if (!groups.contains(art.getGroup())) {
	            groups.add(art.getGroup());
	        	if ( VERBOSE ) Log.v(TAG, "adding item '" + art.getGroup() + "'");
	        }
	        int index = groups.indexOf(art.getGroup());
	        if (children.size() < index + 1) {
	            children.add(new ArrayList<Artefact>());
	        }
	        children.get(index).add(art);
	        
	    }

	    @Override
	    public Object getChild(int groupPosition, int childPosition) {
	        return children.get(groupPosition).get(childPosition);
	    }

	    @Override
	    public long getChildId(int groupPosition, int childPosition) {
	        return childPosition;
	    }
	    
	    // Return a child view. You can load your custom layout here.
	    @Override
	    public View getChildView(int groupPosition, int childPosition, boolean isLastChild,
	            View convertView, ViewGroup parent) {
	    	Artefact a = (Artefact) getChild(groupPosition, childPosition);
			LinearLayout l;
            LayoutInflater infalInflater = (LayoutInflater) mContext
                    .getSystemService(Context.LAYOUT_INFLATER_SERVICE);

	        if (convertView == null) {
	            convertView = infalInflater.inflate(R.layout.artefact_row_child_header, null);
	        }
//
//		        // TODO General YUCK .. need to clean up and create a Journal / MaharaProvide class / utility methods
//		        // && Long.valueOf(art.getJournalId()) <= 0
	    	if ( a.isJournal() ) {
		        String[][] journals = SyncUtils.getJournals("", mContext); // TODO consider refreshing onResume
		        if ( journals != null ) { 
			        String[] journalKeys = journals[0];
			        String[] journalValues = journals[1]; 
		        
			        for ( int j = 0 ; j < journalKeys.length && journalValues[j] != null ; j++ ) {
			        	if ( a.getJournalId().equals(journalKeys[j]) ) {
			    	        ((TextView) convertView.findViewById(R.id.txtArtefactJournal)).setText(journalValues[j]);
			    	        break;
			        	}
			        }
			        ((CheckBox) convertView.findViewById(R.id.txtArtefactIsDraft)).setChecked(a.getIsDraft());
			        ((CheckBox) convertView.findViewById(R.id.txtArtefactAllowComments)).setChecked(a.getAllowComments());
		        }
	    		// TDODO hide layout
	    		l = (LinearLayout)convertView.findViewById(R.id.ArtefactJournalLayout);
	    		if ( l != null ) l.setVisibility(LinearLayout.VISIBLE);
	    		l = (LinearLayout)convertView.findViewById(R.id.ArtefactJournalExtrasLayout);
	    		if ( l != null ) l.setVisibility(LinearLayout.VISIBLE);
	    		
	    		((TextView) convertView.findViewById(R.id.txtArtefactDescriptionLabel)).setText(mContext.getResources().getString(R.string.upload_journal_description_label));
//
	    	} else {
	    		// TDODO hide layout
	    		l = (LinearLayout)convertView.findViewById(R.id.ArtefactJournalLayout);
	    		if ( l != null ) l.setVisibility(LinearLayout.GONE);
	    		l = (LinearLayout)convertView.findViewById(R.id.ArtefactJournalExtrasLayout);
	    		if ( l != null ) l.setVisibility(LinearLayout.GONE);
//
	    		((TextView) convertView.findViewById(R.id.txtArtefactDescriptionLabel)).setText(mContext.getResources().getString(R.string.upload_file_description_label));
	    	}
	        ((TextView) convertView.findViewById(R.id.txtArtefactDescription)).setText(a.getDescription());
	        ((TextView) convertView.findViewById(R.id.txtArtefactTags)).setText(a.getTags());
	        
	        // Add the child to the bottom of the header
	        ((ViewGroup) convertView).addView(infalInflater.inflate(R.layout.artefact_row_child, null));

			l = (LinearLayout)convertView.findViewById(R.id.ArtefactFileLayout);
	        if ( a.getFilename() != null ) {
		        ((TextView) convertView.findViewById(R.id.txtArtefactFilename)).setText(a.getFilename());

		        ImageView iv = (ImageView) convertView.findViewById(R.id.txtArtefactFileThumb);
		        iv.setClickable(true);
		        iv.setOnClickListener(this);
		        iv.setTag(a);

		        Bitmap bm = a.getFileThumbData(mContext);
	        	if ( bm != null ) {
			        iv.setImageBitmap(bm);
			        iv.invalidate();
	        	}
	    		if ( l != null ) l.setVisibility(LinearLayout.VISIBLE);
	        } else {
	    		if ( l != null ) l.setVisibility(LinearLayout.GONE);
	        }
	        
	        ((Button) convertView.findViewById(R.id.btnEdit)).setOnClickListener(this);
	        ((Button) convertView.findViewById(R.id.btnEdit)).setTag(a);
	        ((Button) convertView.findViewById(R.id.btnDelete)).setOnClickListener(this);
	        ((Button) convertView.findViewById(R.id.btnDelete)).setTag(a);
	        return convertView;
	    }

	    @Override
	    public int getChildrenCount(int groupPosition) {
	        return children.get(groupPosition).size();
	    }

	    @Override
	    public Object getGroup(int groupPosition) {
	        return groups.get(groupPosition);
	    }

	    @Override
	    public int getGroupCount() {
	        return groups.size();
	    }

	    @Override
	    public long getGroupId(int groupPosition) {
	        return groupPosition;
	    }

	    // Return a group view. You can load your custom layout here.
	    @Override
	    public View getGroupView(int groupPosition, boolean isExpanded, View convertView,
	            ViewGroup parent) {
	        if (convertView == null) {
	            LayoutInflater infalInflater = (LayoutInflater) mContext
	                    .getSystemService(Context.LAYOUT_INFLATER_SERVICE);
	            convertView = infalInflater.inflate(R.layout.artefact_row, null);
	        }
	        
	        // TODO .. lets make this more efficient ;) 
	        // Default to image - change if journal
	        for ( int i = 0 ; i < children.get(groupPosition).size(); i++ ) {
	        	Artefact a = children.get(groupPosition).get(i);

	        	// Set group title to be the title of first entry
	        	if ( i == 0 ) {
		        	TextView tv = (TextView) convertView.findViewById(R.id.title);
			        tv.setText(a.getTitle());			        
	        	}
	        	
	        	if ( a.isJournal() ) {
	        		ImageView iv = (ImageView) convertView.findViewById(R.id.artefact_icon);
	    	        iv.setImageResource(R.drawable.ic_menu_compose);
	    	        break;
	        	}
	        }
	        
	        return convertView;
	    }

	    @Override
	    public boolean hasStableIds() {
	        return true;
	    }

	    @Override
	    public boolean isChildSelectable(int arg0, int arg1) {
	        return true;
	    }

		@Override
		public void onClick(View v) {

			v.getTag();
			if ( DEBUG )
				Log.d(TAG, "onChildClick detected");
			Artefact a = (Artefact) v.getTag();;
			
			switch (v.getId()) {
			case R.id.btnEdit:
				a.edit(mContext);
				break;
			case R.id.txtArtefactFileThumb:
				a.view(mContext);
				break;
			case R.id.btnDelete:
				a.delete(mContext);
				updateView();
				break;
			}
		}

	}
}